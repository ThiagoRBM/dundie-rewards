from decimal import Decimal
from typing import Optional

from sqlmodel import Session, select

from dundie.models import Balance, Movement, Person, User
from dundie.settings import EMAIL_FROM
from dundie.utils.email import send_mail


def add_person(session: Session, instance: Person):
    """Adiciona pessoa ou atualiza informacoes de pessoa no bando de dados
    db: banco de dados, pk: primary key (email da pessoa), data: dados a serem
    pasados.

    - E-mail é único
    - Se o usuário existir, informações serão atualizadas
    - Banlanço inicial (manager= 100, others= 500)
    - Gera uma senha, se o usuário é novo e a envia por email
    """
    #  checa se o email que se pretende adicionar já existe no db
    existing = session.exec(
        select(Person).where(Person.email == instance.email)
    ).first()
    created = existing is None  # se a pessoa não existir, acima será None
    if created:
        session.add(instance)
        set_initial_balance(session, instance)
        password = set_initial_password(session, instance)
        send_mail(EMAIL_FROM, instance.email, "Your dundie password", password)
        return instance, created
    else:
        existing.dept = instance.dept
        existing.role = instance.role
        existing.currency = instance.currency
        session.add(existing)
        return instance, created


def set_initial_password(session: Session, instance: Person) -> str:
    """Gera e salva senha"""
    user = User(person=instance)  # password generated by model
    session.add(user)
    return user.password


def set_initial_balance(session: Session, person: Person):
    """Adiciona movimentaçoes de pontos e especifica o balanço inicial

    - Manager= 100
    - Others= 500
    """
    value = 100 if person.role == "Manager" else 500
    add_movement(session, person, value)


def add_movement(
    session: Session,
    person: Person,
    value: Decimal,
    actor: Optional[str] = "system",
):
    """Cria a movimentação da pontuação entre usuário
    Examplo:
    add_movement(db, Person(...) . 100, "me")
    """
    movement = Movement(person=person, value=value, actor=actor)
    session.add(movement)

    movements = session.exec(select(Movement).where(Movement.person == person))

    total = sum([mov.value for mov in movements])  # soma o total de
    #  movimentacoes

    existing_balance = session.exec(
        select(Balance).where(Balance.person == person)
    ).first()
    if existing_balance:
        existing_balance.value = total
        session.add(existing_balance)
    else:
        session.add(Balance(person=person, value=total))
